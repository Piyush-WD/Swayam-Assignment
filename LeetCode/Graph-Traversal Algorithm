//BFS(Breadth first search)
class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfs(vector<vector<int>> &adj) {
        vector<int> ans;
        int V = adj.size();
        if (V == 0) return ans;
        vector<int> visited(V, 0);
        queue<int> q;
        visited[0] = 1;
        q.push(0);
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            ans.push_back(node);
            for (int neigh : adj[node]) {
                if (!visited[neigh]) {
                    visited[neigh] = 1;
                    q.push(neigh);
                }
            }
        }
        return ans;
    }
};


//DFS(Depth first search)
class Solution {
  public:
    void dfs(int node, vector<vector<int>>&adj, vector<int>&ans, vector<int>&visited){
        visited[node]=1;
        ans.push_back(node);
        for(int i=0;i<adj[node].size();i++){
            if(!visited[adj[node][i]]){
                dfs(adj[node][i], adj, ans, visited);
            }
        }
    }
  
    vector<int> dfs(vector<vector<int>>& adj) {
        // Code here
        vector<int>ans;
        vector<int>visited(adj.size(), 0);
        for(int i=0;i<adj.size();i++){
            if(!visited[i]){
                dfs(i, adj, ans, visited);
            }
        }
        return ans;
    }
};
