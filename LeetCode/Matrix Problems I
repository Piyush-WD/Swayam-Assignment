//Spiral Traversal
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int left = 0;
        int top = 0;
        int right = matrix[0].size()-1;
        int bottom = matrix.size()-1;
        vector<int>res;
        while(left<=right&&top<=bottom){
            for(int i=left;i<=right;i++){
                res.push_back(matrix[top][i]);
            }
            top++;
            if(top<=bottom){
            for(int j=top;j<=bottom;j++){
                res.push_back(matrix[j][right]);
            }}
            right--;
            if(right>=left&&top<=bottom){
            for(int i=right;i>=left;i--){
                res.push_back(matrix[bottom][i]);
            }}
            bottom--;
            if(bottom>=top&&right>=left){
            for(int j=bottom;j>=top;j--){
                res.push_back(matrix[j][left]);
            }}
            left++;
        }
        return res;
    }
};

//Searching elements in a Matrix
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        int n = matrix[0].size();
        for(int i=0;i<m;i++){
            if(target>=matrix[i][0]&&target<=matrix[i][n-1]){
                for(int j=0;j<n;j++){
                    if(matrix[i][j]==target){
                        return true;
                    }
                }
                return false;
            }
        }
        return false;
    }
};

//Printing elements in sorted order
class Solution {
public:
    void heapify(vector<int>& arr, int n, int i) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        if (left < n && arr[left] > arr[largest])
            largest = left;
        if (right < n && arr[right] > arr[largest])
            largest = right;
        if (largest != i) {
            swap(arr[i], arr[largest]);
            heapify(arr, n, largest);
        }
    }

    vector<int> heapSort(vector<int>& arr) {
        int n = arr.size();
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }
        for (int i = n - 1; i > 0; i--) {
            swap(arr[0], arr[i]);
            heapify(arr, i, 0);
        }

        return arr;
    }

    vector<int> sortArray(vector<int>& nums) {
        return heapSort(nums);
    }
};
