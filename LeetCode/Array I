//Reversing the array
void myReverse(vector<int>& arr, int start, int end) {
    while (start < end) {
        swap(arr[start], arr[end]);
        start++;
        end--;
    }
}
void reverseArray(vector<int> &arr, int m) {
    int n = arr.size();
    m = m % n;  // In case m > n

    // Reverse the entire array
    myReverse(arr, 0, n - 1);
    // Reverse the first m elements
    myReverse(arr, 0, m - 1);
    // Reverse the remaining elements
    myReverse(arr, m, n - 1);
}


//Finding maximum & minimum elements
class Solution {
public:
    int minimumDeletions(vector<int>& nums) {
        int minVal = INT_MAX;
        int maxVal = INT_MIN;
        int a, b;
        for(int i=0;i<nums.size();i++){
            if(nums[i]<minVal){
                minVal = nums[i];
                a = i;
            }
            if(nums[i]>maxVal){
                maxVal = nums[i];
                b = i;
            }
        }
        int fmin = a+1;
        int fmax = b+1;
        int bmin = nums.size()-a;
        int bmax = nums.size()-b;
        int res=min({max(fmin,fmax), max(bmin,bmax), fmin+bmax, fmax+bmin});
        // int res1 = min(max(fmin,fmax), max(bmin,bmax));
        // int res2 = min(fmin+bmax, fmax+bmin);
        // int res = min( res1, res2);
        return res;
    }
};


//Running sum of 1D array
class Solution {
public:
    vector<int> runningSum(vector<int>& nums) {
        int len = nums.size();
        
        for (int i=1;i<len;i++){
            nums[i]=nums[i]+nums[i-1];
        }
        return nums;
    }
};


//Count elements with maximum frequency
class Solution {
public:
    int maxFrequencyElements(vector<int>& nums) {
        unordered_map<int, int>map;
        int max = 1;
        for(int i=0;i<nums.size();i++){
            if(map.find(nums[i])==map.end()){
                map[nums[i]]=1;
            }
            else{
                map[nums[i]]++;
                if(map[nums[i]]>max){
                    max=map[nums[i]];
                }
            }
        }
        int count = 0;
        for (auto &pair : map) {
            if(pair.second==max){
                count+=max;
            }
        }
        return count;
    }
};


//Left/right rotate an array by k positions
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        k=k%nums.size();
        reverse(nums.begin(), nums.end());
        reverse(nums.begin(), nums.begin()+k);
        reverse(nums.begin()+k, nums.end());
    }
};
