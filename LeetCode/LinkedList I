//Reverse LinkedList
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode *curr, ListNode *prev){
        if (curr==NULL){
            return prev;
        }
        ListNode *fut = curr->next;
        curr->next = prev;
        return reverse(fut,curr);
    }
    ListNode* reverseList(ListNode* head) {
        return reverse(head,NULL);
    }
};


//Find mid of the LinkedList
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *slow = head;
        ListNode *fast = head;
        while (fast!=NULL&&fast->next!=NULL){
            slow = slow->next;
            fast = fast->next;
            fast = fast->next;
        }
        return slow;
    }
};


//Merge Two sorted LinkedList
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode *head;
        ListNode *tail;
        while(list1&&list2){
           if (head==NULL){
            if(list1->val>list2->val){
                head=tail=list2;
                list2=list2->next;
            }
            else{
                head=tail=list1;
                list1=list1->next;
            }
           }
           else{
            if(list1->val>list2->val){
                tail->next=list2;
                list2=list2->next;
                tail=tail->next;
            }
            else{
                tail->next=list1;
                list1=list1->next;
                tail=tail->next;
            }
           }
        }
        if(list1){
            tail->next=list1;
        }
        if(list2){
            tail->next=list2;
        }
        return head;
    }
};


